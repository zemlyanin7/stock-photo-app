# Stock Photo Automation App - Правила разработки

## Описание проекта

Это приложение для автоматизации работы фотографа со стоковыми площадками. Приложение создано для личного использования автором-фотографом для ускорения рутинных процессов размещения фотографий на стоковых платформах.

### Основная функциональность:
- **Две категории контента**: Editorial и Commercial фотографии
- **Batch-обработка**: Перетаскивание папки с фотографиями для массовой обработки
- **AI-анализ**: Автоматическое создание названий и ключевых слов с помощью нейросетей
- **EXIF обработка**: Извлечение и анализ метаданных фотографий
- **Автоматическая загрузка**: FTP/SFTP/API загрузка на стоковые платформы
- **Настройки стоков**: Конфигурация подключений к различным стоковым площадкам
- **Кастомизация промптов**: Редактирование системных промптов для AI

## Технический стек

### Backend (Go)
- **Фреймворк**: Wails v2.10.1 (Go + веб-интерфейс)
- **База данных**: SQLite (github.com/mattn/go-sqlite3)
- **Обработка изображений**: github.com/disintegration/imaging
- **EXIF**: github.com/rwcarlsen/goexif
- **Сетевые протоколы**: 
  - FTP: github.com/jlaffaye/ftp
  - SFTP: github.com/pkg/sftp
  - SSH: golang.org/x/crypto

### Frontend
- **Bundler**: Vite 3.x
- **Стили**: Tailwind CSS
- **Интернационализация**: Кастомная система i18n
- **Архитектура**: Vanilla JS с Wails биндингами

### Структура проекта
```
├── app.go           # Основной backend код
├── main.go          # Точка входа
├── models/          # Модели данных
├── services/        # Бизнес-логика
├── uploaders/       # Логика загрузки на стоки
├── frontend/        # Веб-интерфейс
├── temp/           # Временные файлы и миниатюры
└── app.db          # SQLite база данных
```

## Правила разработки

### 1. Общие принципы
- **Язык комментариев**: Все комментарии в коде должны быть на русском языке
- **Обработка ошибок**: Всегда обрабатывать ошибки Go правильно, не игнорировать
- **Логирование**: Использовать детальное логирование для отладки процессов AI и загрузки
- **Безопасность**: Никогда не логировать API ключи и пароли в открытом виде
- **Запуск приложения**: НИКОГДА не запускать приложение самостоятельно. Только предлагать пользователю запустить `wails dev` для проверки изменений

### 2. Backend (Go)
- **Структура**: Следовать принципам чистой архитектуры
- **Контекст**: Использовать context.Context для долгосрочных операций
- **Конкурентность**: Обрабатывать изображения в горутинах с пулом воркеров
- **Валидация**: Всегда валидировать входные данные от фронтенда
- **База данных**: Использовать транзакции для связанных операций

### 3. Frontend
- **Состояние**: Управлять состоянием через глобальные переменные и события
- **UI/UX**: Показывать прогресс долгосрочных операций
- **Drag & Drop**: Поддерживать перетаскивание папок и файлов
- **Responsive**: Интерфейс должен работать на разных размерах экрана
- **Локализация**: Подготавливать все строки для перевода

### 4. AI интеграция
- **Ошибки API**: Обрабатывать ошибки AI API gracefully с retry логикой
- **Токены**: Оптимизировать размер изображений для экономии токенов
- **JSON ответы**: Всегда валидировать структуру ответов от AI
- **Промпты**: Хранить промпты в базе данных для гибкой настройки

### 5. Работа с файлами
- **Временные файлы**: Всегда очищать temporary файлы после использования
- **Миниатюры**: Создавать оптимизированные превью для AI анализа
- **EXIF**: Сохранять оригинальные EXIF данные перед модификацией
- **Пути**: Использовать path/filepath для кроссплатформенности

### 6. Загрузка на стоки
- **Конфигурация**: Хранить настройки подключений в зашифрованном виде
- **Retry логика**: Реализовать повторные попытки при сбоях
- **Прогресс**: Отображать прогресс загрузки в реальном времени
- **Логи**: Детально логировать все операции загрузки

### 7. Тестирование
- **Unit тесты**: Покрывать критическую бизнес-логику
- **Моки**: Мокировать внешние API для тестирования
- **Интеграционные тесты**: Тестировать реальные flow обработки изображений

### 8. Производительность
- **Горутины**: Использовать worker pools для batch обработки
- **Память**: Освобождать ресурсы после обработки больших изображений
- **Кэширование**: Кэшировать результаты AI анализа при возможности
- **Lazy loading**: Загружать изображения по требованию в UI

### 9. Безопасность
- **Пути файлов**: Валидировать все пути файлов против directory traversal
- **Учетные данные**: Шифровать пароли и API ключи в базе данных
- **Sandbox**: Ограничивать доступ к файловой системе только рабочими папками

## Важные моменты
- Проект находится в активной разработке для личного использования
- Приоритет на стабильность и надежность обработки
- UI должен быть интуитивным для повседневного использования
- Архитектура должна легко расширяться для новых стоковых площадок 